EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
result.exe -- emu8086 assembler version: 4.08  
 
[ 18.09.2024  --  20:10:17 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ; В программе работает счётчик, циклически меняющий значения в диапазоне 1..6.
[   2]        :                                       ; При нажатии любой клавиши текущее содержимое счетчика показывается в
[   3]        :                                       ; определенном месте экрана в виде ASCII-символа, код которого соответствует
[   4]        :                                       ; значению счетчика. При нажатии клавиши "Цифра 0", программа завершается.
[   5]        :                                       ; Факт нажатия клавиши отслеживается в обработчике прерывания от таймера 1Ch.
[   6]        :                                       
[   7]        :                                       	.186
[   8]        :                                       	assume	cs:code, ds:data, ss:stk
[   9]        :                                       
[  10]        :                                       ; Сегмент команд программы
[  11]        :                                       code	segment	para public use16 "code"
[  12]    0000:                                       main	proc
[  13]        :                                       	; Настроить сегментный регистр DS на сегмент данных
[  14]    0000: B8 0D 00                              	mov	ax, data	; Установить регистр сегмента данных DS,
[  15]    0003: 8E D8                                 	mov	ds, ax		; указывающим на сегмент data
[  16]        :                                       
[  17]        :                                       	; ********** Основная часть программы **********
[  18]        :                                       
[  19]        :                                       	; Вывести начальное сообщение
[  20]    0005: B4 09                                 	mov	ah, 09h
[  21]    0007: BA 00 00                              	mov	dx, offset StartMsg
[  22]    000A: CD 21                                 	int	21h
[  23]        :                                       
[  24]        :                                       	; Считать текущие параметры экрана
[  25]    000C: E8 5E 00                              	call	GetTextScreenPrm
[  26]        :                                       
[  27]        :                                       	; Сохранить адрес предыдущего обработчика прерывания 1Ch
[  28]    000F: B4 35                                 	mov	ah, 35h		; Функция DOS: получить адрес обработчика
[  29]    0011: B0 1C                                 	mov	al, 1Ch		; Вектор преывания, адрес обработчика которого получаем
[  30]    0013: CD 21                                 	int	21h
[  31]    0015: 2E 89 1E C4 00                        	mov	word ptr cs:Old_Int1Ch, bx	; Сохранить смещение
[  32]    001A: 2E 8C 06 C6 00                        	mov	word ptr cs:Old_Int1Ch+2, es	; Сохранить сегмент
[  33]        :                                       	; Установить собственный обработчик прерывания 1Ch
[  34]    001F: B4 25                                 	mov	ah, 25h		; Функция DOS: установить адрес обработчика
[  35]    0021: B0 1C                                 	mov	al, 1Ch		; Вектор преывания, адрес обработчика которого устанавливаем
[  36]    0023: BA 8C 00                              	mov	dx, offset Int1Ch_Handler	; Смещение обработчика
[  37]    0026: 1E                                    	push	ds
[  38]    0027: 0E                                    	push	cs
[  39]    0028: 1F                                    	pop	ds				; Сегмент обработчика
[  40]    0029: CD 21                                 	int	21h
[  41]    002B: 1F                                    	pop	ds
[  42]        :                                       
[  43]        :                                       	; Цикл изменения значений циклического счетчика
[  44]    002C: FE 06 1D 00                           @11:	inc	CounterVal
[  45]    0030: 80 3E 1D 00 06                        	cmp	CounterVal, 6
[  46]    0035: 76 05                                 	jbe	@12
[  47]    0037: C6 06 1D 00 01                        	mov	CounterVal, 1	; Зацикливание счетчика: 6+1 = 1
[  48]    003C: 80 3E 1E 00 01                        @12:	cmp	KeypressFlag, 1	; Проверка флага нажатия на клавишу
[  49]    0041: 75 0B                                 	jne	@13
[  50]    0043: A0 1D 00                              	mov	al, CounterVal	; На клавишу нажали - вывод символа на экран
[  51]    0046: E8 31 00                              	call	OutSymb
[  52]    0049: C6 06 1E 00 00                        	mov	KeypressFlag, 0	; Сбросить счетчик нажатия на клавишу
[  53]    004E: 80 3E 1F 00 01                        @13:	cmp	ExitFlag, 1	; Проверка флага завершения работы
[  54]    0053: 75 D7                                 	jne     @11
[  55]        :                                       
[  56]        :                                       	; Восстановить предыдущий обработчик прерывания 1Ch
[  57]    0055: B4 25                                 	mov	ah, 25h		; Функция DOS: установить адрес обработчика
[  58]    0057: B0 1C                                 	mov	al, 1Ch		; Вектор преывания, адрес обработчика которого устанавливаем
[  59]    0059: 1E                                    	push	ds
[  60]    005A: 2E 8B 16 C4 00                        	mov	dx, word ptr cs:Old_Int1Ch	; Восстановить смещение
[  61]    005F: 2E FF 36 C6 00                        	push	word ptr cs:Old_Int1Ch+2	; Восстановить сегмент
[  62]    0064: 1F                                    	pop	ds
[  63]    0065: CD 21                                 	int	21h
[  64]    0067: 1F                                    	pop	ds
[  65]        :                                       
[  66]        :                                       	; ********** Завершение работы программы **********
[  67]    0068: B8 00 4C                              @31:	mov	ax, 4C00h       ; Выход из
[  68]    006B: CD 21                                 	int	21h             ; программы
[  69]        :                                       main	endp
[  70]        :                                       
[  71]        :                                       ; Получает параметры текущего текстового режима экрана
[  72]    006D:                                       GetTextScreenPrm proc
[  73]        :                                       	; Сохранить регистры
[  74]    006D: 50                                    	push	ax
[  75]    006E: 53                                    	push	bx
[  76]        :                                       
[  77]        :                                       	; Выполнить считывание информации
[  78]    006F: B4 0F                                 	mov	ah, 0Fh		; Получить параметры видеорежима
[  79]    0071: CD 10                                 	int	10h		; на выходе в BH - номер активной видеостраницы
[  80]    0073: 88 3E 1C 00                           	mov	ScrActPgNum, bh
[  81]        :                                       
[  82]        :                                       	; Восстановить регистры
[  83]    0077: 5B                                    	pop	bx
[  84]    0078: 58                                    	pop	ax
[  85]        :                                       
[  86]    0079: C3                                    	ret
[  87]        :                                       GetTextScreenPrm endp
[  88]        :                                       
[  89]        :                                       ; Выводит указанный символ на текущую страницу экрана в текущую позицию курсора
[  90]        :                                       ; Вход:  AL - ASCII-код символа
[  91]    007A:                                       OutSymb	proc
[  92]        :                                       	; Сохранить регистры
[  93]    007A: 50                                    	push	ax
[  94]    007B: 53                                    	push	bx
[  95]    007C: 51                                    	push	cx
[  96]        :                                       	; Выполнить вывод символа в текущую позицию курсора
[  97]    007D: B4 0A                                 	mov	ah, 0Ah
[  98]    007F: 8A 3E 1C 00                           	mov	bh, ScrActPgNum ; на видеостраницу BH
[  99]        :                                       	;mov	al, al		; в AL указать код символа
[ 100]    0083: B9 01 00                              	mov	cx, 1		; количество повторо символа
[ 101]    0086: CD 10                                 	int	10h
[ 102]        :                                       	; Восстановить регистры
[ 103]    0088: 59                                    	pop	cx
[ 104]    0089: 5B                                    	pop	bx
[ 105]    008A: 58                                    	pop	ax
[ 106]        :                                       
[ 107]    008B: C3                                    	ret
[ 108]        :                                       OutSymb	endp
[ 109]        :                                       
[ 110]        :                                       ; Обработчик прерывания 1Ch
[ 111]    008C:                                       Int1Ch_Handler	proc
[ 112]        :                                       	; Вызвать предыдущий обработчик прерываний - цепочку обработчиков
[ 113]    008C: 9C                                    	pushf
[ 114]    008D: 2E FF 1E C4 00                        	call	dword ptr cs:[Old_Int1Ch]
[ 115]        :                                       	; Сохранить регистры
[ 116]    0092: 60                                    	pusha
[ 117]    0093: 1E                                    	push	ds
[ 118]        :                                       	; Отключить прерывания от таймера (чтобы не было повторной входимости)
[ 119]    0094: FA                                    	cli			; Запретить все прерывания
[ 120]    0095: E4 21                                 	in	al, 21h		; Прочитать текущую маску контроллера прерываний Master
[ 121]    0097: 0C 01                                 	or	al, 00000001b	; Устанавливаем 0-й бит, отвечающий за IRQ0-таймер
[ 122]        :                                       				;  - тем самым запрещаем прерывания от него
[ 123]    0099: E6 21                                 	out	21h, al		; Записываем маску в контроллер - таймер запрещен
[ 124]    009B: FB                                    	sti			; Разрешить все прерывания
[ 125]        :                                       	; Выполнить проверку нажатия клавиши
[ 126]    009C: B8 0D 00                              	mov	ax, data	; В DS записать адрес сегмента данных для
[ 127]    009F: 8E D8                                 	mov	ds, ax          ; доступа к переменным программы
[ 128]    00A1: B4 01                                 	mov	ah, 01h		; Проверить, нажата ли клавиша
[ 129]    00A3: CD 16                                 	int	16h
[ 130]    00A5: 74 12                                 	jz	@IH1		; Если ZF-0, то клавиша нажата
[ 131]    00A7: B4 00                                 	mov	ah, 00h		; Если клавиша нажата, то считать код клавиши
[ 132]    00A9: CD 16                                 	int	16h
[ 133]    00AB: C6 06 1E 00 01                        	mov	KeypressFlag, 1	; Установить признак нажатия на любую клавишу
[ 134]    00B0: 3C 30                                 	cmp	al, '0'		; Если была нажата клавиша "0",
[ 135]    00B2: 75 05                                 	jne	@IH1
[ 136]    00B4: C6 06 1F 00 01                        	mov	ExitFlag, 1	; то установить флаг завершения работы
[ 137]    00B9:                                       @IH1:	; Включить прерывания от таймера (чтобы таймер снова работал)
[ 138]    00B9: FA                                    	cli			; Запретить все прерывания
[ 139]    00BA: E4 21                                 	in	al, 21h		; Прочитать текущую маску контроллера прерываний Master
[ 140]    00BC: 24 FE                                 	and	al, 11111110b	; Сбрасываем 0-й бит, отвечающий за IRQ0-таймер
[ 141]        :                                       				; - тем самым разрешаем прерывания от него
[ 142]    00BE: E6 21                                 	out	21h, al		; Записываем маску в контроллер - таймер разрешен
[ 143]    00C0: FB                                    	sti			; Разрешить все прерывания
[ 144]        :                                       
[ 145]        :                                       	; Восстановить регистры
[ 146]    00C1: 1F                                    	pop	ds
[ 147]    00C2: 61                                    	popa
[ 148]        :                                       
[ 149]    00C3: CF                                    	iret
[ 150]        :                                       
[ 151]        :                                       ; Поля данных обработчика в сегменте команд
[ 152]    00C4: 00 00 00 00                           Old_Int1Ch	dd	?	; Адрес предыдущего обработчика прерывания 1Ch
[ 153]        :                                       Int1Ch_Handler	endp
[ 154]        :                                       
[ 155]        :                                       code	ends
[ 156]        :                                       
[ 157]        :                                       ; Сегмент данных программы
[ 158]        :                                       data	segment	para public use16 "data"
[ 159]        :                                       ; Стартовое текстовое сообщение
[ 160]    00D0: 00 00 00 00 00 00 00 20 00 00 00 00   StartMsg	db	'Текущее значение счетчика: ', '$'
                00 00 00 00 20 00 00 00 00 00 00 00 
                00 3A 20 24                         
[ 161]        :                                       ; Текущие параметры экрана
[ 162]    00EC: 00                                    ScrActPgNum	db	0	; Номер активной видеостраницы
[ 163]        :                                       ; Текущее значение счетчика (1..6)
[ 164]    00ED: 00                                    CounterVal	db	0
[ 165]        :                                       ; Признак нажатия клавиши (необходимости вывести текущее значение счетчика)
[ 166]        :                                       ; 0-нет; 1-да
[ 167]    00EE: 00                                    KeypressFlag	db	0
[ 168]        :                                       ; Признак необходимости завершить программу (нажали клавишу "0")
[ 169]        :                                       ; 0-нет; 1-да
[ 170]    00EF: 00                                    ExitFlag	db	0
[ 171]        :                                       
[ 172]        :                                       data	ends
[ 173]        :                                       
[ 174]        :                                       ; Сегмент стека программы
[ 175]        :                                       stk	segment stack	use16
[ 176]    00F0: 00 00 00 00 00 00 00 00 00 00 00 00   	db	256 dup (0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[ 177]        :                                       stk	ends
[ 178]        :                                       
[ 179]        :                                       end	main		; Конец программы с точкой входа main
[ 180]        :                                       
[ 181]        :                                       
[ 182]        :                                       
[ 183]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: F0      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 02      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 0F      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 61      -   check sum (l.byte)
0013: 35      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 00      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 00      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022: 9D      -   relocation table - offset inside segment (l.byte)
0023: 00      -   relocation table - offset inside segment (h.byte)
0024: 00      -   relocation table - segment anchor (l.byte)
0025: 00      -   relocation table - segment anchor (h.byte)
0026 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
