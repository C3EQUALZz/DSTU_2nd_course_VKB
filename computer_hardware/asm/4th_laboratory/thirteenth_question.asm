org 100h                     ; Указываем, что код начинается с адреса 100h (для .COM файлов)

mov cx, 22                   ; Устанавливаем счетчик CX в 22 (количество итераций)
xor ax, ax                   ; Обнуляем регистр AX

@@:
   mov bl, [arr]             ; Загружаем первый байт массива arr в регистр BL
   and bl, 7                 ; Применяем побитовое И с 7 (00000111b) для получения последних 3 бит
   cmp bl, 010b              ; Сравниваем результат с 2 (010b)
   jnz next                  ; Если результат не равен 2, переходим к метке next

   inc ax                    ; Увеличиваем AX на 1, если предыдущий результат равен 2

next:
   shr word[arr + 1], 1      ; Сдвигаем второй байт массива arr вправо на 1 бит
   rcr [arr + 0], 1          ; Циклически сдвигаем первый байт массива arr вправо на 1 бит
   loop @b                   ; Уменьшаем CX и повторяем цикл, пока CX не станет 0

; Выводим значение AX в виде ASCII символов
aam                         ; Преобразуем AX в двоичное представление (разделяем на 2 байта)
ror ax, 8                   ; Циклически сдвигаем AX вправо на 8 бит (перемещаем старший байт в младший)
add ax, '00'                ; Преобразуем значение в ASCII (добавляем '00' к AX)
int 29h                     ; Выводим символ на экран (через DOS прерывание 29h)
ror ax, 8                   ; Циклически сдвигаем AX вправо на 8 бит (возвращаем старший байт)
int 29h                     ; Выводим символ на экран (через DOS прерывание 29h)
jmp $                       ; Бесконечный цикл (задержка программы)

arr db 10101010b, 10101010b, 10101010b ; Инициализируем массив arr тремя байтами
