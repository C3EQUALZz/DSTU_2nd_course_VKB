package programmingLanguagesJava.laboratories.fourthLaboratory;

import java.util.Collection;

public interface CustomList<T> {
    /**
     * Метод добавления элемента в конец списка
     * @param obj элемент, который мы хотим добавить в конец списка
     */
    void add(T obj);

    /**
     * Метод вставки элемента в список.
     * Замечание: не вижу смысла в реализации отдельных методов addFirst, addLast, когда можно пользоваться этим.
     * @param obj элемент, который мы хотим вставить в список на определенную позицию.
     * @param index индекс, по которому осуществится вставка.
     */
    void add(T obj, int index);

    /**
     * Показ всех элементов списка
     * @return возвращает строку, которая нужна для отображения в консоли
     */
    @Override
    String toString();

    /**
     * Определение количества элементов списка
     * @return возвращает количество элементов в списке, целое число
     */
    int size();

    /**
     * Проверка списка на пустоту
     * @return возвращает true, если список пустой, в ином случае false
     */
    boolean isEmpty();

    /**
     * Метод, который удаляет элемент по индексу.
     * Замечание: не вижу смысла писать отдельные методы для удаления первого и последнего элемента,
     * когда можно просто вписать индекс здесь
     * @param index целое число (от 0 до size - 1).
     * @return возвращает true, если получилось удалить элемент, в ином случае false.
     */
    boolean remove(int index);

    /**
     * Удаление элемента списка с данным значением
     * @param obj элемент, который мы хотим удалить в односвязном списке.
     * @return возвращает true, если получилось удалить элемент, в ином случае false.
     */
    boolean remove(T obj);

    /**
     * Поиск данного значения в списке
     * @param obj элемент, который мы хотим найти в списке
     * @return возвращает индекс элемента, который мы нашли, в ином случае возвращает -1.
     */
    int indexOf(T obj);

    /**
     * Поиск наибольшего значения в списке
     * @return возвращает максимальный элемент (значение) в списке.
     */
    T max();

    /**
     * Поиск наименьшего значения в списке.
     * @return возвращает минимальный элемент (значение) в списке.
     */
    T min();

    /**
     * Удаление всех элементов списка с данным значением
     * @param collection любая коллекция, в которой находятся элементы для удаления.
     * @return возвращает true, если размер коллекции поменялся в течение вызова.
     */
    boolean removeAll(Collection<? extends T> collection);

    /**
     * Изменение всех элементов списка с данным значением на новое.
     */
    void replace(T obj);

    /**
     * Определение, является ли список симметричным.
     * @return возвращает true, если длина size % 2 == 0
     */
    boolean isSymmetric();

    /**
     * Определение, можно ли удалить из списка каких-нибудь два элемента так, чтобы новый список оказался упорядоченным.
     * @return определяет возможно ли такое...
     */
    boolean checkSorted();

    /**
     * Определение, сколько различных значений содержится в списке.
     * @return возвращает целое число - количество различных элементов в списке.
     */
    int countDistinct();

    /**
     * Удаление из списка элементов, значения которых уже встречались в предыдущих элементах.
     * @return возвращает новый список, где нет повторяющихся элементов.
     */
    CustomList<T> distinct();

    /**
     * Изменение порядка элементов на обратный.
     * @return возвращает новый список, который развернули полностью
     */
    CustomList<T> reversed();

    /**
     * Сортировка элементов списка двумя способами (изменение указателей, изменение значений элементов)
     * @param key - ключ сортировки (изменение указателей - "changePointer", изменение значение - "changeValue").
     * @return возвращает отсортированный список.
     */
    CustomList<T> sort(String key);

    /**
     * Обращение к элементу списка с помощью индексации.
     * @param index целое число от 0 до size - 1
     * @return возвращает элемент списка
     */
    T get(int index);
}
