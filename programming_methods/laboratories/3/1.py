"""
Задача №1790. НОП с восстановлением

Даны две последовательности, требуется найти и вывести их наибольшую общую подпоследовательность.

Входные данные

В первой строке входных данных содержится число N– длина первой последовательности (1 ≤ N ≤ 1000).
Во второй строке заданы члены первой последовательности (через пробел) – целые числа, не превосходящие 10000 по модулю.

В третьей строке записано число M– длина второй последовательности (1 ≤ M≤ 1000).
В четвертой строке задаются члены второй последовательности (через пробел) – целые числа, не превосходящие 10000 по модулю.

Выходные данные

Требуется вывести наибольшую общую подпоследовательность данных последовательностей, через пробел.
"""
from typing import List

def longest_common_subsequence(n: int, a: List[int], m: int, b: List[int]) -> List[int]:
    """Находит наибольшую общую подпоследовательность двух последовательностей."""
    # Создаем таблицу для хранения длины LCS
    dp = [[0] * (m + 1) for _ in range(n + 1)]

    # Заполняем таблицу
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            if a[i - 1] == b[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

    # Восстанавливаем LCS
    lcs = []
    i, j = n, m
    while i > 0 and j > 0:
        if a[i - 1] == b[j - 1]:
            lcs.append(a[i - 1])
            i -= 1
            j -= 1
        elif dp[i - 1][j] == dp[i][j]:
            i -= 1
        else:
            j -= 1

    return lcs[::-1]  # Возвращаем LCS в правильном порядке


def main() -> None:
    """Основная функция для чтения входных данных и вывода результата."""
    n = int(input())
    a = list(map(int, input().split()))
    m = int(input())
    b = list(map(int, input().split()))

    lcs = longest_common_subsequence(n, a, m, b)
    print(' '.join(map(str, lcs)))


if __name__ == "__main__":
    main()
