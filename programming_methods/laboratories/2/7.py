"""
Задача №1. Коровы - в стойла

На прямой расположены стойла, в которые необходимо расставить коров так, чтобы минимальное расcтояние между коровами было как можно больше.

Входные данные

В первой строке вводятся числа N (2<N<10001) – количество стойл и K (1<K<N) – количество коров.
Во второй строке задаются N натуральных чисел в порядке возрастания – координаты стойл (координаты не превосходят 10^9)

Выходные данные

Выведите одно число – наибольшее возможное допустимое расстояние.
"""
from typing import List


def max_min_distance(stalls: List[int], num_cows: int) -> int:
    stalls.sort()  # Сортируем координаты стойл
    left, right = 0, stalls[-1] - stalls[0] + 1  # Устанавливаем границы для бинарного поиска

    while left < right:
        mid = (left + right) // 2  # Проверяем среднее значение
        cows_placed = 1  # Счетчик коров, первая корова всегда ставится в первое стойло
        last_stall = stalls[0]  # Последнее стойло, в которое была поставлена корова

        for current_stall in stalls[1:]:
            if current_stall - last_stall >= mid:  # Проверяем, можно ли поставить корову
                cows_placed += 1
                last_stall = current_stall  # Обновляем последнее стойло

        if cows_placed >= num_cows:  # Если коров можно разместить
            left = mid + 1  # Увеличиваем минимальное расстояние
        else:
            right = mid  # Уменьшаем максимальное расстояние

    return left - 1  # Возвращаем максимальное допустимое расстояние


def main() -> None:
    n, k = map(int, input().split())  # Читаем количество стойл и коров
    stalls = list(map(int, input().split()))  # Читаем координаты стойл

    result = max_min_distance(stalls, k)  # Вычисляем результат
    print(result)  # Выводим результат


if __name__ == "__main__":
    main()
