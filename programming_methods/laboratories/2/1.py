"""
Задача №417. Автомобильные номера

При расследовании дорожно-транспортных происшествий часто возникают проблемы с розыском автомобилей,
водители которых покинули место происшествия.

Получение свидетельских показаний – непростая работа.
Ситуация осложняется тем, что очень часто свидетели могут только приблизительно вспомнить номер автомобиля.
При этом с большой вероятностью опрашиваемый может перепутать порядок цифр или букв в номере.

По полученному от свидетеля происшествия номеру, подсчитайте, сколько различных номеров может получиться из него
перестановкой букв и/или цифр, а также выведите все такие номера.

Напомним, что автомобильные номера в России состоят из трех букв и трех цифр, упорядоченных следующим образом: буква,
три цифры, затем две буквы.
Фрагмент номера, который идентифицирует регион, в котором зарегистрирован автомобиль, мы будем игнорировать.

В номере могут использоваться следующие буквы: «A», «B», «C», «E», «H», «K», «M», «O», «P», «T», «X», «Y»
(эти буквы имеют схожие по написанию аналоги как в русском, так и в латинском алфавите).
В этой задаче во входных данных будут использоваться буквы латинского алфавита.

Входные данные

На вход программы поступает одна строка, которая представляет собой корректный автомобильный номер.
Выходные данные

В первой строке выведите число k – количество номеров, которые могут получиться из заданного перестановкой букв и/или цифр.

В последующих k строках выведите все такие номера в произвольном порядке.
"""
from itertools import permutations
from typing import List, Set, Tuple


def generate_permutations(number: str) -> Tuple[int, List[str]]:
    # Извлекаем буквы и цифры из номера
    letters = number[0] + number[4] + number[5]
    digits = number[1] + number[2] + number[3]

    # Генерируем уникальные перестановки
    unique_letter_permutations: Set[str] = {''.join(p) for p in permutations(letters)}
    unique_digit_permutations: Set[str] = {''.join(p) for p in permutations(digits)}

    # Формируем все возможные номера
    all_combinations: List[str] = []
    for letter in unique_letter_permutations:
        for digit in unique_digit_permutations:
            combined_number = f"{letter[0]}{digit[0]}{digit[1]}{digit[2]}{letter[1]}{letter[2]}"
            all_combinations.append(combined_number)

    return len(all_combinations), all_combinations


def main() -> None:
    car_number = input()
    count, permutations_list = generate_permutations(car_number)

    print(count)
    for number in permutations_list:
        print(number)


if __name__ == "__main__":
    main()
