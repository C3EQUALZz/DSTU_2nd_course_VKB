"""
Задача №3555. 10E: Pink Floyd

Группа Pink Floyd собирается отправиться в новый концертный тур по всему миру.
По предыдущему опыту группа знает, что солист Роджер Уотерс постоянно нервничает при перелетах.
На некоторых маршрутах он теряет вес от волнения, а на других — много ест и набирает вес.

Известно, что чем больше весит Роджер, тем лучше выступает группа, поэтому требуется спланировать перелеты так,
чтобы вес Роджера на каждом концерте был максимально возможным.

Группа должна посещать города в том же порядке, в котором она дает концерты.
При этом между концертами группа может посещать промежуточные города.

Входные данные

Первая строка входного файла содержит три натуральных числа n, m и k — количество городов в мире, количество рейсов и
количество концертов, которые должна дать группа соответственно (n≤100, m≤10000, 2≤k≤10000).
Города пронумерованы числами от 1 до n.

Следующие m строк содержат описание рейсов, по одному на строке.
Рейс номер i описывается тремя числами bi, ei и wi — номер начального и конечного города рейса и предполагаемое
изменение веса Роджера в миллиграммах (1≤bi,ei≤n, −100000≤wi≤100000).

Последняя строка содержит числа a1,a2,...,ak — номера городов, в которых проводятся концерты (ai≠ai+1).
В начале концертного тура группа находится в городе a1.

Гарантируется, что группа может дать все концерты.

Выходные данные

Первая строка выходного файла должна содержать число l — количество рейсов, которые должна сделать группа.
Вторая строка должна содержать l чисел — номера используемых рейсов.

Если существует такая последовательность маршрутов между концертами, что Роджер будет набирать вес неограниченно,
то первая строка выходного файла должна содержать строку „infinitely kind“.
"""
import sys

INF = sys.maxsize // 2

n, m, c = map(int, input().split())

matrix = [[0 if i == j else INF for j in range(n)] for i in range(n)]

parents = [[0 for _ in range(n)] for _ in range(n)]

uu = []
vv = []

for i in range(m):
    vertex1, vertex2, w = map(int, input().split())
    vertex1 -= 1
    vertex2 -= 1
    uu.append(vertex1)
    vv.append(vertex2)
    matrix[vertex1][vertex2] = -w
    parents[vertex1][vertex2] = i

for k in range(n):
    for i in range(n):
        for j in range(n):
            if matrix[i][j] > matrix[i][k] + matrix[k][j]:
                matrix[i][j] = matrix[i][k] + matrix[k][j]
                parents[i][j] = parents[i][k]

cities = [i - 1 for i in map(int, input().split())]

flag = 0
for i in range(c):
    if matrix[cities[i]][cities[i]] < 0:
        flag = 1
        break

if flag == 0:
    path = []
    for i in range(c - 1):
        v = cities[i]
        while v != cities[i + 1]:
            path.append(parents[v][cities[i + 1]])
            v = vv[parents[v][cities[i + 1]]]
            if len(path) > 10000000:
                print("infinitely kind")
                sys.exit()
    print(len(path))
    for p in path:
        print(p + 1, end=" ")
else:
    print("infinitely kind")
