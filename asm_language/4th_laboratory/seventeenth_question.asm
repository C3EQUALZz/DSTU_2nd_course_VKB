data segment
    mass db 32, 255, 0, 0, 0, 0  ; Массив байтов, содержащий 6 значений ( 123, 234, 55, 66, 107, 208 )
    bit dw 0                     ; Переменная для хранения текущего бита
data ends

code segment
    assume cs: code, ds: data     ; Указываем сегменты кода и данных

    start:
        mov ax, data              ; Загружаем адрес сегмента данных в регистр AX
        mov ds, ax                ; Инициализируем сегмент данных

        mov bx, 0                  ; Обнуляем регистр BX (используется для индексации)
        mov dx, 0                  ; Обнуляем регистр DX (счетчик единиц)
        mov ax, 0                  ; Обнуляем регистр AX
        mov bit, bx                ; Сохраняем значение BX в переменной bit

    beg:
       mov ax, bit            ; Загружаем текущее значение bit в AX
       mov bl, 8              ; Устанавливаем BL в 8 (количество бит в байте)
       div bl                 ; Делим AX на 8, результат в AL, остаток в AH
       mov bl, al             ; Сохраняем результат деления в BL (номер байта)

       mov al, [mass + bx]       ; Загружаем байт из массива mass по индексу BX

       mov cl, ah                 ; Сохраняем остаток деления (номер бита) в CL
       shr al, cl                 ; Сдвигаем AL вправо на количество бит, равное CL

       and al, 1                  ; Логическое И с 1 для получения значения бита
       cmp al, 0              ; Сравниваем значение бита с 0
       je no                  ; Если бит равен 0, переходим к метке no
       inc dx                 ; Увеличиваем счетчик единиц в DX, если бит равен 1

    no:
       mov ax, 5              ; Загружаем 5 в AX
       add ax, bit            ; Добавляем текущее значение bit к AX
       mov bit, ax            ; Сохраняем новое значение в переменной bit

       cmp ax, 6 * 8          ; Сравниваем AX с 48 (6 байт * 8 бит)
       jl beg                 ; Если AX меньше 48, продолжаем цикл

    quit:
       mov ax, 4C00h             ; Завершение программы с кодом возврата 0
       int 21h                   ; Вызов прерывания DOS для выхода
code ends
end start
