"""
AUTHOR: 1 вариант Ковалев Данил ВКБ22
"""
import re


def first_question(string: str) -> bool:
    """
    Написать регулярное выражение,
    определяющее является ли данная строка строкой "abcdefghijklmnopqrstuv18340" или нет.
    """
    return bool(re.fullmatch(r"abcdefghijklmnopqrstuv18340", string.strip()))


def second_question(string: str) -> bool:
    """
    Написать регулярное выражение, определяющее является ли данная строка GUID с или без скобок.
    Где GUID это строчка, состоящая из 8, 4, 4, 4, 12 шестнадцатеричных цифр разделенных тире.
    """
    pattern = r"^(\{?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\}?)$"
    return bool(re.fullmatch(pattern, string.strip()))


def third_question(string: str) -> bool:
    """
    Написать регулярное выражение, определяющее является ли заданная строка правильным MAC-адресом.
    """
    pattern = r"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"
    return bool(re.fullmatch(pattern, string.strip()))


def fourth_question(string: str) -> bool:
    """
    Написать регулярное выражение, определяющее является ли данная строчка валидным URL адресом.
    В данной задаче правильным URL считаются адреса http и https, явное указание протокола также может отсутствовать.
    Учитываются только адреса, состоящие из символов, т.е. IP адреса в качестве URL не присутствуют при проверке.
    Допускаются поддомены, указание порта доступа через двоеточие, GET запросы с передачей параметров,
    доступ к подпапке на домене, допускается наличие якоря через решетку.
    Одно буквенные домены считаются запрещенными. Запрещены спецсимволы, например «–» в начале и конце имени домена.
    Запрещен символ «_» и пробел в имени домена. При составлении регулярного выражения ориентируйтесь на
    список правильных и неправильных выражений заданных ниже.
    – пример правильных выражений:http://www.example.com, http://example.com.
    – пример неправильных выражений: Just Text, http://a.com.
    """
    pattern = r"https?:\/\/(?:www\.)?[a-z0-9]{2,}\.com/gi"
    return bool(re.fullmatch(pattern, string.strip()))


def fifth_question(string: str) -> bool:
    """
    Написать регулярное выражение, определяющее является ли данная строчка шестнадцатеричным идентификатором цвета в
    HTML. Где #FFFFFF для белого, #000000 для черного, #FF0000 для красного и т.д.
    – пример правильных выражений:#FFFFFF, #FF3421, #00ff00.
    – пример неправильных выражений: 232323, f#fddee, #fd2.
    """
    pattern = r'^#[0-9a-fA-F]{6}$'
    return bool(re.fullmatch(pattern, string.strip()))


def sixth_question(string: str) -> bool:
    """
    Написать регулярное выражение, определяющее является ли данная строчка датой в формате dd/mm/yyyy.
    Начиная с 1600 года до 9999 года.
    – пример правильных выражений: 29/02/2000, 30/04/2003, 01/01/2003.
    – пример неправильных выражений: 29/02/2001, 30-04-2003, 1/1/1899.
    """
    pattern = r"^(0[1-9]|[12]\d|3[01])/(0[1-9]|1[0-2])/((?:16|[2-9]\d)\d{2})$"
    return bool(re.fullmatch(pattern, string.strip()))


def seventh_question(string: str) -> bool:
    """
    Написать регулярное выражение, определяющее является ли данная строчка валидным E-mail адресом согласно RFC
    под номером 2822.
    – пример правильных выражений: user@example.com, root@localhost
    – пример неправильных выражений: bug@@@com.ru, @val.ru, Just Text2.
    """
    pattern = r"^\w+@\w+\.\w+$"
    return bool(re.fullmatch(pattern, string.strip()))


def eighth_question(string: str) -> bool:
    """
    Составить регулярное выражение, определяющее является ли заданная строка IP адресом, записанным в десятичном виде.
    – пример правильных выражений: 127.0.0.1, 255.255.255.0.
    – пример неправильных выражений: 1300.6.7.8, abc.def.gha.bcd.
    """
    pattern = r"^([0-9]{1,3}[\.]){3}[0-9]{1,3}$"
    return bool(re.fullmatch(pattern, string.strip()))


def ninth_question(string: str) -> bool:
    """
    Проверить, надежно ли составлен пароль.
    Пароль считается надежным, если он состоит из 8 или более символов.
    Где символом может быть английская буква, цифра и знак подчеркивания.
    Пароль должен содержать хотя бы одну заглавную букву, одну маленькую букву и одну цифру.
    – пример правильных выражений: C00l_Pass, SupperPas1.– пример неправильных выражений: Cool_pass, C00l.
    """
    ...


def tenth_question(string: str) -> bool:
    """
    Проверить является ли заданная строка шестизначным числом, записанным в десятичной системе
    счисления без нулей в старших разрядах.
    – пример правильных выражений: 123456, 234567.
    – пример неправильных выражений: 1234567, 12345.
    """
    ...


def eleventh_question(string: str) -> bool:
    """
    Есть текст со списками цен. Извлечь из него цены в USD, RUR, EU.
    – пример правильных выражений: 23.78 USD.
    – пример неправильных выражений: 22 UDD, 0.002 USD.
    """
    ...


def twelve_question(string: str) -> bool:
    """

    """
    ...


def thirteenth_question(string: str) -> bool:
    """

    """
    ...


def main():
    match input("Введите какое задание вы хотите: "):
        case "1":
            print(first_question(input("Введите вашу строку для проверки ")))
        case "2":
            print(second_question(input("Введите вашу строку для проверки ")))
        case "3":
            print(third_question(input("Введите вашу строку для проверки ")))
        case "4":
            print(fourth_question(input("Введите вашу строку для проверки ")))
        case "5":
            print(fifth_question(input("Введите вашу строку для проверки ")))
        case "6":
            print(sixth_question(input("Введите вашу строку для проверки ")))
        case "7":
            print(seventh_question(input("Введите вашу строку для проверки ")))
        case "8":
            print(eighth_question(input("Введите вашу строку для проверки ")))
        case "9":
            print(ninth_question(input("Введите вашу строку для проверки ")))
        case _:
            print("Вы выбрали неверное задание ")


if __name__ == "__main__":
    main()
