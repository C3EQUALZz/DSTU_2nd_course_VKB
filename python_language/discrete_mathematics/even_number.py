"""
Этот код - функция с названием "isPrime", которая принимает число "n" в качестве аргумента и возвращает логическое
значение, указывающее, является ли число простым или нет.

Первый оператор if проверяет, является ли число четным (делится на 2). Если да, то функция проверяет, равно ли число
2 (единственному четному простому числу). Если да, то функция возвращает True. Если нет, то функция возвращает False.

Если число нечетное, то функция устанавливает переменную "d" равной 3 (первому нечетному простому числу) и входит в
цикл while. Цикл продолжается до тех пор, пока "d" в квадрате меньше или равно "n" и "n" не делится на "d".

Внутри цикла "d" увеличивается на 2 (чтобы пропустить четные числа). Если цикл выходит, потому что "d" в квадрате
больше, чем "n", то "n" является простым числом, и функция возвращает True. В противном случае цикл выходит,
потому что "n" делится на "d" и, следовательно, не является простым числом, поэтому функция возвращает False.


>>> isprime(15)
False
>>> isprime(1)
False
>>> isprime(2)
True
>>> isprime(4)
False

"""


# Простое число — натуральное число, имеющее ровно два различных натуральных делителя — единицу и самого себя.
# Единица простым числом не является.
def isprime(n: int) -> bool:
    # проверка на четность числа, более быстрый аналог, чем n % 2 == 0
    if (not (n & 1) and n != 2) or n == 1:
        return False
    # мы проверили все четные, поэтому начинаем рассматривать нечетные числа
    d = 3
    # если наш предположительный делитель больше числа в квадрате или делится на него
    while pow(d, 2) <= n and n % d != 0:
        # изначально мы проверили все четные числа, поэтому такой шаг
        d += 2
    return pow(d, 2) > n


if __name__ == "__main__":
    import doctest

    doctest.testmod()